Feb 4

- Understood query types

- Can Cypher be used to solve these queries?

  Questions:
  - Q1: Does replies(p1,p2) + replies(p2,p2) > x, or
        replies(p1,p2) > x && replies(p2,p1) > x, or
        replies(p1,p2) > x || repleis(p2,p1) > x?

Feb 6

Visualization

- Let's visualize the graph
- There is a way to import graph into neo4j
  https://github.com/ldbc/ldbc_socialnet_bm_neo4j

  Neo4j work:
  - git clone https://github.com/ldbc/ldbc_socialnet_bm_neo4j.git
    cd ldbc_socialnet_bm_neo4j
    ./build.sh
  - Modify src/main/resources/ldbc_neo4j.properties
    data_dir=../../data/outputDir-1k/
  - Modify pom.xml:
    https://github.com/ldbc/ldbc_socialnet_bm_neo4j/issues/1
  - Import into neo4j: (export MAVEN_OPTS=-Xmx100g)
    mvn exec:java -Dexec.mainClass=com.ldbc.socialnet.workload.neo4j.load.LdbcSocialNeworkNeo4jImporter
      This takes some time

- Got the neo4j importer running on the big machine
  - needs java7
  - needs git-1.7
  - needs maven

- Install neo4j

- Imported the network
  modify conf/neo4j-server.properties
    org.neo4j.server.database.location=/home/manzooe/dev/ldbc_socialnet_bm_neo4j/db
    org.neo4j.server.webserver.address=0.0.0.0

- Visualized the network
  Open: 10.68.202.47:7474 

Others

- Meeting with Tariq and Tris, split work (due Sunday, Feb 9, 8-10PM)
  - Me: Q1 and Q2, brute-force correct implementation
  - Tariq: Q3 and Q4, brute-force correct implementation
  - Tris: Find a fast algorithm to find the largest SCC in a graph

Feb 7-9 --

Feb 12

  - In the test data, nodes 523 and 600 don't know anyone
  - Comments are commentID concatenated with machine number
    https://github.com/ldbc/ldbc_socialnet_bm/blob/master/ldbc_socialnet_dbgen/src/main/java/ldbc/socialnet/dbgen/serializer/CSV.java#L687
  - The person_knows_person.cvs relationship is undirected
  - Completed naive query 1 implementation, verified with test output

Feb 13
  - Be careful of spaces in the provided queries when reading dates
  - The graphs seem to have many small components for tags, the largest in 1k nodes = 22 nodes
  - Query 2 requires ties to be broken by "increasing" lexicographical order, needs custom comparator to sort
  - Completed naive query 2 implementation, verified with test output

Mar 3
  - Their ELF interpreter is in /lib64/ld-linux-x86-64.so.2
    Compile by statically linking in C++/glibc:
g++ --std=c++11 -static -static-libgcc -static-libstdc++ -Wl,-dynamic-linker=/lib64/ld-linux-x86-64.so.2 src/queries.cpp -o queries 2>&1
    And we have our first submission up.

  - Vagrant (make sure you have Virtualbox working)
    http://docs.vagrantup.com/v2/getting-started/index.html
    sudo modprobe vboxdrv vboxnetflt
    vagrant init sigmodbox https://github.com/2creatives/vagrant-centos/releases/download/v6.5.1/centos65-x86_64-20131205.box
    vagrant up
